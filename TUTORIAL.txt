=== INTRODUCTION ==========================================

This code was developed primarily to evolve agent behaviours for Half Field Offense (Robocup 2D Soccer) and Ms. Pac-Man.
The current distribution includes a generic learning algorithm and interfaces for both task domains.

=== DEPENDENCIES ===========================================

Operating system: Linux or Unix variant recommended.

The following software is required by the SBB learning algorithm:

	scons	 
	g++ 
	libbz2-dev

Additional software for task domains:

	java development kit and runtime environment

RoboCup only:

	rcssserver-15.2.2 https://sourceforge.net/projects/sserver/files/rcssserver/
	rcssmonitor https://sourceforge.net/projects/sserver/files/rcssmonitor/
	make
	boost
	flex
	bison (bison 2.7 version required)

=== COMPILING ==============================================

After installing dependencis, navigate to the main SBBTD directory and type:

	scons

=== RUNNING EXPERIMENTS ====================================

These instructions will reproduce experiments detailed in a report that is currently under review for publication. 
The tutorial will be fleshed out with further details and references to that report once it is published. 

In each domain, the best experimental case (in terms of gameplay and model complexity) incorporated both 
transfer learning and multiple, task-agnostic diversity mechanisms. Animations of 'champion' evloved policies in 
each domain are linked in the README.md file. The following steps will produce similar results. 

In both domains, learning agents communicate with the game server through sockets.

Before starting, navigate to the root SBBTD directory and set the SBBTDPATH environment variable:

	export SBBTDPATH=`pwd`

=== Half Field Offense ==========

Source code for the Half Field Offense experiments can be found in:

Game Server: see rcssserver in dependencies
Learning Agents: src/cpp/players 
Experiment: src/cpp/experiments_robocup
SBBTD Algorithm: src/cpp/sbbTD 

Once compiled, the experiment consists of calling the above code through a series of scripts.
Note that steps 1 and 3 below each require several days to complete on a machine with 24 CPUs @ 2.4GHz.

1. Evolve 10 source populations in each subtask (steps 1a and 1b can run in parallel if you have enough CPUs):

1a. Keepaway task:

	cd $SBBTDPATH/experiments_robocup/keepaway
	for i in `seq 7100 100 8000`; do ./soccer-runner.sh $i; done

1b. Scoring task:

	cd $SBBTDPATH/experiments_robocup/scoring
	for i in `seq 8100 100 9000`; do ./soccer-runner.sh $i; done

2. Compile and filter source task populations.

	$SBBTDPATH/scripts/compileAndFilterSourceTaskPops_robocup.sh

3. Evolve 10 target task populations:
	
	cd $SBBTDPATH/experiments_robocup/hfo
	for i in `seq 7100 100 8000`; do ./soccer-runner.sh $i; done

4. Print test results:

	cd $SBBTDPATH/experiments_robocup/hfo
	$SBBTDPATH/scripts/getHFOTestResults.sh


=== Ms. Pac-Man ==========

Source code for the Ms. Pac-Man experiments can be found in:

Game Server: src/java/MsPacManNew 
Learning Agent: src/cpp/mspacmanSBBAgent
SBBTD Algorithm: src/cpp/sbbTD 

Once compiled, the experiment consists of calling the above code through a series of scripts.
Note that steps 1 and 3 below each require roughly 1 week to complete on a machine with 24 CPUs @ 2.4GHz.

1. Evolve 10 source populations in each subtask (steps 1a and 1b can run in parallel if you have enough CPUs):

1a. Ghostscore task:

	cd $SBBTDPATH
      	cp -r runPacman mspacman-ghostscore
	cd mspacman-ghostscore
	for i in `seq 7100 100 8000`; do ./mspacman-runner.sh $i 0; done

1b. Pillscore task:

	cd $SBBTDPATH
      	cp -r runPacman mspacman-pillscore
	cd mspacman-pillscore
	for i in `seq 8100 100 9000`; do ./mspacman-runner.sh $i 1; done


2. Compile and filter source task populations.

	$SBBTDPATH/scripts/compileAndFilterSourceTaskPops_mspacman.sh

3. Evolve 10 target task populations:
	
	cd $SBBTDPATH/runPacman
	for i in `seq 7100 100 8000`; do ./mspacman-runner.sh $i 2; done

4. Run Test:

	cd $SBBTDPATH/runPacman
	$SBBTDPATH/scripts/getPacmanTestTeams.sh
        for i in `seq 7100 100 8000`; do ./mspacman-runner-test.sh $i GamescoreTestTeams 100; done

5. Print test results:

	cd $SBBTDPATH/runPacman
	$SBBTDPATH/scripts/getPacmanTestResults.sh 1 7100 8000 100
	 

	

      
	
	

	

	




